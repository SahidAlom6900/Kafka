[2022-02-24 17:20:22,317] INFO [Controller id=1 epoch=1] Sending UpdateMetadata request to brokers HashSet(1) for 0 partitions (state.change.logger)
[2022-02-24 17:22:00,101] INFO [Controller id=1 epoch=1] Changed partition topic01-0 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:22:00,101] INFO [Controller id=1 epoch=1] Sending UpdateMetadata request to brokers HashSet() for 0 partitions (state.change.logger)
[2022-02-24 17:22:00,107] INFO [Controller id=1 epoch=1] Sending UpdateMetadata request to brokers HashSet() for 0 partitions (state.change.logger)
[2022-02-24 17:22:00,136] INFO [Controller id=1 epoch=1] Changed partition topic01-0 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:22:00,138] INFO [Controller id=1 epoch=1] Sending LeaderAndIsr request to broker 1 with 1 become-leader and 0 become-follower partitions (state.change.logger)
[2022-02-24 17:22:00,139] INFO [Controller id=1 epoch=1] Sending UpdateMetadata request to brokers HashSet(1) for 1 partitions (state.change.logger)
[2022-02-24 17:22:00,140] INFO [Controller id=1 epoch=1] Sending UpdateMetadata request to brokers HashSet() for 0 partitions (state.change.logger)
[2022-02-24 17:22:00,144] INFO [Broker id=1] Handling LeaderAndIsr request correlationId 1 from controller 1 for 1 partitions (state.change.logger)
[2022-02-24 17:22:00,165] INFO [Broker id=1] Stopped fetchers as part of LeaderAndIsr request correlationId 1 from controller 1 epoch 1 as part of the become-leader transition for 1 partitions (state.change.logger)
[2022-02-24 17:22:00,261] INFO [Broker id=1] Leader topic01-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:22:00,287] INFO [Broker id=1] Finished LeaderAndIsr request in 144ms correlationId 1 from controller 1 for 1 partitions (state.change.logger)
[2022-02-24 17:22:00,295] INFO [Broker id=1] Add 1 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 1 epoch 1 with correlation id 2 (state.change.logger)
[2022-02-24 17:23:34,059] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-22 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:23:34,059] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-30 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:23:34,059] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-25 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:23:34,059] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-35 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:23:34,059] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-37 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:23:34,059] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-38 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:23:34,059] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-13 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:23:34,059] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-8 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:23:34,059] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-21 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:23:34,059] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-4 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:23:34,059] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-27 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:23:34,059] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-7 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:23:34,059] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-9 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:23:34,059] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-46 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:23:34,060] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-41 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:23:34,060] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-33 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:23:34,060] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-23 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:23:34,060] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-49 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:23:34,060] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-47 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:23:34,060] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-16 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:23:34,060] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-28 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:23:34,060] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-31 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:23:34,060] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-36 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:23:34,060] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-42 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:23:34,060] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-3 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:23:34,060] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-18 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:23:34,060] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-15 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:23:34,060] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-24 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:23:34,060] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-17 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:23:34,060] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-48 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:23:34,060] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-19 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:23:34,060] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-11 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:23:34,060] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-2 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:23:34,060] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-43 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:23:34,060] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-6 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:23:34,060] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-14 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:23:34,060] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-20 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:23:34,060] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-0 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:23:34,060] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-44 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:23:34,060] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-39 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:23:34,060] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-12 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:23:34,060] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-45 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:23:34,060] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-1 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:23:34,060] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-5 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:23:34,060] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-26 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:23:34,060] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-29 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:23:34,061] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-34 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:23:34,061] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-10 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:23:34,061] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-32 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:23:34,061] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-40 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:23:34,061] INFO [Controller id=1 epoch=1] Sending UpdateMetadata request to brokers HashSet() for 0 partitions (state.change.logger)
[2022-02-24 17:23:34,062] INFO [Controller id=1 epoch=1] Sending UpdateMetadata request to brokers HashSet() for 0 partitions (state.change.logger)
[2022-02-24 17:23:34,161] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-22 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:23:34,161] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-30 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:23:34,161] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-25 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:23:34,161] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-35 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:23:34,161] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-37 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:23:34,161] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-38 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:23:34,161] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-13 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:23:34,161] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-8 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:23:34,161] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-21 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:23:34,161] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-4 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:23:34,161] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-27 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:23:34,161] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-7 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:23:34,161] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-9 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:23:34,162] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-46 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:23:34,162] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-41 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:23:34,162] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-33 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:23:34,162] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-23 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:23:34,162] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-49 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:23:34,162] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-47 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:23:34,162] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-16 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:23:34,162] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-28 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:23:34,162] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-31 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:23:34,162] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-36 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:23:34,162] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-42 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:23:34,162] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-3 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:23:34,162] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-18 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:23:34,162] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-15 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:23:34,162] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-24 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:23:34,162] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-17 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:23:34,162] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-48 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:23:34,162] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-19 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:23:34,162] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-11 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:23:34,162] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-2 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:23:34,162] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-43 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:23:34,162] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-6 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:23:34,162] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-14 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:23:34,162] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-20 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:23:34,162] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-0 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:23:34,162] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-44 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:23:34,162] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-39 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:23:34,163] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-12 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:23:34,163] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-45 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:23:34,163] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-1 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:23:34,163] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-5 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:23:34,163] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-26 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:23:34,163] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-29 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:23:34,163] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-34 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:23:34,163] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-10 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:23:34,163] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-32 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:23:34,163] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-40 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:23:34,163] INFO [Controller id=1 epoch=1] Sending LeaderAndIsr request to broker 1 with 50 become-leader and 0 become-follower partitions (state.change.logger)
[2022-02-24 17:23:34,163] INFO [Controller id=1 epoch=1] Sending UpdateMetadata request to brokers HashSet(1) for 50 partitions (state.change.logger)
[2022-02-24 17:23:34,164] INFO [Controller id=1 epoch=1] Sending UpdateMetadata request to brokers HashSet() for 0 partitions (state.change.logger)
[2022-02-24 17:23:34,165] INFO [Broker id=1] Handling LeaderAndIsr request correlationId 3 from controller 1 for 50 partitions (state.change.logger)
[2022-02-24 17:23:34,201] INFO [Broker id=1] Stopped fetchers as part of LeaderAndIsr request correlationId 3 from controller 1 epoch 1 as part of the become-leader transition for 50 partitions (state.change.logger)
[2022-02-24 17:23:34,220] INFO [Broker id=1] Leader __consumer_offsets-3 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:23:34,234] INFO [Broker id=1] Leader __consumer_offsets-18 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:23:34,256] INFO [Broker id=1] Leader __consumer_offsets-41 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:23:34,274] INFO [Broker id=1] Leader __consumer_offsets-10 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:23:34,293] INFO [Broker id=1] Leader __consumer_offsets-33 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:23:34,311] INFO [Broker id=1] Leader __consumer_offsets-48 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:23:34,331] INFO [Broker id=1] Leader __consumer_offsets-19 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:23:34,345] INFO [Broker id=1] Leader __consumer_offsets-34 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:23:34,364] INFO [Broker id=1] Leader __consumer_offsets-4 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:23:34,383] INFO [Broker id=1] Leader __consumer_offsets-11 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:23:34,398] INFO [Broker id=1] Leader __consumer_offsets-26 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:23:34,417] INFO [Broker id=1] Leader __consumer_offsets-49 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:23:34,436] INFO [Broker id=1] Leader __consumer_offsets-39 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:23:34,451] INFO [Broker id=1] Leader __consumer_offsets-9 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:23:34,482] INFO [Broker id=1] Leader __consumer_offsets-24 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:23:34,499] INFO [Broker id=1] Leader __consumer_offsets-31 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:23:34,513] ERROR [Broker id=1] Error while processing LeaderAndIsr request correlationId 3 received from controller 1 epoch 1 for partition __consumer_offsets-3 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader$.$anonfun$recoverLog$6(LogLoader.scala:468)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.scala:17)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogLoader$.recoverLog(LogLoader.scala:468)
	at kafka.log.LogLoader$.$anonfun$load$11(LogLoader.scala:168)
	at kafka.log.LogLoader$.load(LogLoader.scala:280)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1785)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:892)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:844)
	at kafka.cluster.Partition.createLog(Partition.scala:359)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:334)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:341)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:546)
	at kafka.cluster.Partition.makeLeader(Partition.scala:530)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1581)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:633)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:499)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1579)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:266)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:173)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Thread.java:748)
[2022-02-24 17:23:34,515] ERROR [Broker id=1] Error while processing LeaderAndIsr request correlationId 3 received from controller 1 epoch 1 for partition __consumer_offsets-18 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader$.$anonfun$recoverLog$6(LogLoader.scala:468)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.scala:17)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogLoader$.recoverLog(LogLoader.scala:468)
	at kafka.log.LogLoader$.$anonfun$load$11(LogLoader.scala:168)
	at kafka.log.LogLoader$.load(LogLoader.scala:280)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1785)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:892)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:844)
	at kafka.cluster.Partition.createLog(Partition.scala:359)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:334)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:341)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:546)
	at kafka.cluster.Partition.makeLeader(Partition.scala:530)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1581)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:633)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:499)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1579)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:266)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:173)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Thread.java:748)
[2022-02-24 17:23:34,515] ERROR [Broker id=1] Error while processing LeaderAndIsr request correlationId 3 received from controller 1 epoch 1 for partition __consumer_offsets-41 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader$.$anonfun$recoverLog$6(LogLoader.scala:468)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.scala:17)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogLoader$.recoverLog(LogLoader.scala:468)
	at kafka.log.LogLoader$.$anonfun$load$11(LogLoader.scala:168)
	at kafka.log.LogLoader$.load(LogLoader.scala:280)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1785)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:892)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:844)
	at kafka.cluster.Partition.createLog(Partition.scala:359)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:334)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:341)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:546)
	at kafka.cluster.Partition.makeLeader(Partition.scala:530)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1581)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:633)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:499)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1579)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:266)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:173)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Thread.java:748)
[2022-02-24 17:23:34,515] ERROR [Broker id=1] Error while processing LeaderAndIsr request correlationId 3 received from controller 1 epoch 1 for partition __consumer_offsets-10 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader$.$anonfun$recoverLog$6(LogLoader.scala:468)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.scala:17)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogLoader$.recoverLog(LogLoader.scala:468)
	at kafka.log.LogLoader$.$anonfun$load$11(LogLoader.scala:168)
	at kafka.log.LogLoader$.load(LogLoader.scala:280)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1785)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:892)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:844)
	at kafka.cluster.Partition.createLog(Partition.scala:359)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:334)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:341)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:546)
	at kafka.cluster.Partition.makeLeader(Partition.scala:530)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1581)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:633)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:499)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1579)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:266)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:173)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Thread.java:748)
[2022-02-24 17:23:34,516] ERROR [Broker id=1] Error while processing LeaderAndIsr request correlationId 3 received from controller 1 epoch 1 for partition __consumer_offsets-33 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader$.$anonfun$recoverLog$6(LogLoader.scala:468)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.scala:17)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogLoader$.recoverLog(LogLoader.scala:468)
	at kafka.log.LogLoader$.$anonfun$load$11(LogLoader.scala:168)
	at kafka.log.LogLoader$.load(LogLoader.scala:280)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1785)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:892)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:844)
	at kafka.cluster.Partition.createLog(Partition.scala:359)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:334)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:341)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:546)
	at kafka.cluster.Partition.makeLeader(Partition.scala:530)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1581)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:633)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:499)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1579)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:266)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:173)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Thread.java:748)
[2022-02-24 17:23:34,516] ERROR [Broker id=1] Error while processing LeaderAndIsr request correlationId 3 received from controller 1 epoch 1 for partition __consumer_offsets-48 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader$.$anonfun$recoverLog$6(LogLoader.scala:468)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.scala:17)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogLoader$.recoverLog(LogLoader.scala:468)
	at kafka.log.LogLoader$.$anonfun$load$11(LogLoader.scala:168)
	at kafka.log.LogLoader$.load(LogLoader.scala:280)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1785)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:892)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:844)
	at kafka.cluster.Partition.createLog(Partition.scala:359)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:334)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:341)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:546)
	at kafka.cluster.Partition.makeLeader(Partition.scala:530)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1581)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:633)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:499)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1579)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:266)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:173)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Thread.java:748)
[2022-02-24 17:23:34,516] ERROR [Broker id=1] Error while processing LeaderAndIsr request correlationId 3 received from controller 1 epoch 1 for partition __consumer_offsets-19 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader$.$anonfun$recoverLog$6(LogLoader.scala:468)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.scala:17)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogLoader$.recoverLog(LogLoader.scala:468)
	at kafka.log.LogLoader$.$anonfun$load$11(LogLoader.scala:168)
	at kafka.log.LogLoader$.load(LogLoader.scala:280)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1785)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:892)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:844)
	at kafka.cluster.Partition.createLog(Partition.scala:359)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:334)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:341)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:546)
	at kafka.cluster.Partition.makeLeader(Partition.scala:530)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1581)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:633)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:499)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1579)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:266)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:173)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Thread.java:748)
[2022-02-24 17:23:34,516] ERROR [Broker id=1] Error while processing LeaderAndIsr request correlationId 3 received from controller 1 epoch 1 for partition __consumer_offsets-34 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader$.$anonfun$recoverLog$6(LogLoader.scala:468)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.scala:17)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogLoader$.recoverLog(LogLoader.scala:468)
	at kafka.log.LogLoader$.$anonfun$load$11(LogLoader.scala:168)
	at kafka.log.LogLoader$.load(LogLoader.scala:280)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1785)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:892)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:844)
	at kafka.cluster.Partition.createLog(Partition.scala:359)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:334)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:341)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:546)
	at kafka.cluster.Partition.makeLeader(Partition.scala:530)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1581)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:633)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:499)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1579)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:266)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:173)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Thread.java:748)
[2022-02-24 17:23:34,516] ERROR [Broker id=1] Error while processing LeaderAndIsr request correlationId 3 received from controller 1 epoch 1 for partition __consumer_offsets-4 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader$.$anonfun$recoverLog$6(LogLoader.scala:468)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.scala:17)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogLoader$.recoverLog(LogLoader.scala:468)
	at kafka.log.LogLoader$.$anonfun$load$11(LogLoader.scala:168)
	at kafka.log.LogLoader$.load(LogLoader.scala:280)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1785)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:892)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:844)
	at kafka.cluster.Partition.createLog(Partition.scala:359)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:334)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:341)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:546)
	at kafka.cluster.Partition.makeLeader(Partition.scala:530)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1581)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:633)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:499)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1579)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:266)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:173)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Thread.java:748)
[2022-02-24 17:23:34,516] ERROR [Broker id=1] Error while processing LeaderAndIsr request correlationId 3 received from controller 1 epoch 1 for partition __consumer_offsets-11 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader$.$anonfun$recoverLog$6(LogLoader.scala:468)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.scala:17)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogLoader$.recoverLog(LogLoader.scala:468)
	at kafka.log.LogLoader$.$anonfun$load$11(LogLoader.scala:168)
	at kafka.log.LogLoader$.load(LogLoader.scala:280)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1785)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:892)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:844)
	at kafka.cluster.Partition.createLog(Partition.scala:359)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:334)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:341)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:546)
	at kafka.cluster.Partition.makeLeader(Partition.scala:530)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1581)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:633)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:499)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1579)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:266)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:173)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Thread.java:748)
[2022-02-24 17:23:34,516] ERROR [Broker id=1] Error while processing LeaderAndIsr request correlationId 3 received from controller 1 epoch 1 for partition __consumer_offsets-26 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader$.$anonfun$recoverLog$6(LogLoader.scala:468)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.scala:17)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogLoader$.recoverLog(LogLoader.scala:468)
	at kafka.log.LogLoader$.$anonfun$load$11(LogLoader.scala:168)
	at kafka.log.LogLoader$.load(LogLoader.scala:280)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1785)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:892)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:844)
	at kafka.cluster.Partition.createLog(Partition.scala:359)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:334)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:341)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:546)
	at kafka.cluster.Partition.makeLeader(Partition.scala:530)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1581)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:633)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:499)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1579)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:266)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:173)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Thread.java:748)
[2022-02-24 17:23:34,517] ERROR [Broker id=1] Error while processing LeaderAndIsr request correlationId 3 received from controller 1 epoch 1 for partition __consumer_offsets-49 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader$.$anonfun$recoverLog$6(LogLoader.scala:468)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.scala:17)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogLoader$.recoverLog(LogLoader.scala:468)
	at kafka.log.LogLoader$.$anonfun$load$11(LogLoader.scala:168)
	at kafka.log.LogLoader$.load(LogLoader.scala:280)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1785)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:892)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:844)
	at kafka.cluster.Partition.createLog(Partition.scala:359)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:334)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:341)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:546)
	at kafka.cluster.Partition.makeLeader(Partition.scala:530)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1581)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:633)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:499)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1579)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:266)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:173)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Thread.java:748)
[2022-02-24 17:23:34,517] ERROR [Broker id=1] Error while processing LeaderAndIsr request correlationId 3 received from controller 1 epoch 1 for partition __consumer_offsets-39 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader$.$anonfun$recoverLog$6(LogLoader.scala:468)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.scala:17)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogLoader$.recoverLog(LogLoader.scala:468)
	at kafka.log.LogLoader$.$anonfun$load$11(LogLoader.scala:168)
	at kafka.log.LogLoader$.load(LogLoader.scala:280)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1785)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:892)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:844)
	at kafka.cluster.Partition.createLog(Partition.scala:359)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:334)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:341)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:546)
	at kafka.cluster.Partition.makeLeader(Partition.scala:530)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1581)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:633)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:499)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1579)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:266)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:173)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Thread.java:748)
[2022-02-24 17:23:34,517] ERROR [Broker id=1] Error while processing LeaderAndIsr request correlationId 3 received from controller 1 epoch 1 for partition __consumer_offsets-9 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader$.$anonfun$recoverLog$6(LogLoader.scala:468)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.scala:17)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogLoader$.recoverLog(LogLoader.scala:468)
	at kafka.log.LogLoader$.$anonfun$load$11(LogLoader.scala:168)
	at kafka.log.LogLoader$.load(LogLoader.scala:280)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1785)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:892)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:844)
	at kafka.cluster.Partition.createLog(Partition.scala:359)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:334)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:341)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:546)
	at kafka.cluster.Partition.makeLeader(Partition.scala:530)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1581)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:633)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:499)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1579)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:266)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:173)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Thread.java:748)
[2022-02-24 17:23:34,517] ERROR [Broker id=1] Error while processing LeaderAndIsr request correlationId 3 received from controller 1 epoch 1 for partition __consumer_offsets-24 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader$.$anonfun$recoverLog$6(LogLoader.scala:468)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.scala:17)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogLoader$.recoverLog(LogLoader.scala:468)
	at kafka.log.LogLoader$.$anonfun$load$11(LogLoader.scala:168)
	at kafka.log.LogLoader$.load(LogLoader.scala:280)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1785)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:892)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:844)
	at kafka.cluster.Partition.createLog(Partition.scala:359)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:334)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:341)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:546)
	at kafka.cluster.Partition.makeLeader(Partition.scala:530)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1581)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:633)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:499)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1579)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:266)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:173)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Thread.java:748)
[2022-02-24 17:23:34,517] ERROR [Broker id=1] Error while processing LeaderAndIsr request correlationId 3 received from controller 1 epoch 1 for partition __consumer_offsets-31 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader$.$anonfun$recoverLog$6(LogLoader.scala:468)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.scala:17)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogLoader$.recoverLog(LogLoader.scala:468)
	at kafka.log.LogLoader$.$anonfun$load$11(LogLoader.scala:168)
	at kafka.log.LogLoader$.load(LogLoader.scala:280)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1785)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:892)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:844)
	at kafka.cluster.Partition.createLog(Partition.scala:359)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:334)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:341)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:546)
	at kafka.cluster.Partition.makeLeader(Partition.scala:530)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1581)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:633)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:499)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1579)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:266)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:173)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Thread.java:748)
[2022-02-24 17:23:34,517] ERROR [Broker id=1] Error while processing LeaderAndIsr request correlationId 3 received from controller 1 epoch 1 for partition __consumer_offsets-46 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader$.$anonfun$recoverLog$6(LogLoader.scala:468)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.scala:17)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogLoader$.recoverLog(LogLoader.scala:468)
	at kafka.log.LogLoader$.$anonfun$load$11(LogLoader.scala:168)
	at kafka.log.LogLoader$.load(LogLoader.scala:280)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1785)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:892)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:844)
	at kafka.cluster.Partition.createLog(Partition.scala:359)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:334)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:341)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:546)
	at kafka.cluster.Partition.makeLeader(Partition.scala:530)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1581)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:633)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:499)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1579)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:266)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:173)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Thread.java:748)
[2022-02-24 17:23:34,517] ERROR [Broker id=1] Error while processing LeaderAndIsr request correlationId 3 received from controller 1 epoch 1 for partition __consumer_offsets-1 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader$.$anonfun$recoverLog$6(LogLoader.scala:468)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.scala:17)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogLoader$.recoverLog(LogLoader.scala:468)
	at kafka.log.LogLoader$.$anonfun$load$11(LogLoader.scala:168)
	at kafka.log.LogLoader$.load(LogLoader.scala:280)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1785)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:892)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:844)
	at kafka.cluster.Partition.createLog(Partition.scala:359)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:334)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:341)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:546)
	at kafka.cluster.Partition.makeLeader(Partition.scala:530)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1581)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:633)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:499)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1579)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:266)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:173)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Thread.java:748)
[2022-02-24 17:23:34,518] ERROR [Broker id=1] Error while processing LeaderAndIsr request correlationId 3 received from controller 1 epoch 1 for partition __consumer_offsets-16 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader$.$anonfun$recoverLog$6(LogLoader.scala:468)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.scala:17)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogLoader$.recoverLog(LogLoader.scala:468)
	at kafka.log.LogLoader$.$anonfun$load$11(LogLoader.scala:168)
	at kafka.log.LogLoader$.load(LogLoader.scala:280)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1785)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:892)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:844)
	at kafka.cluster.Partition.createLog(Partition.scala:359)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:334)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:341)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:546)
	at kafka.cluster.Partition.makeLeader(Partition.scala:530)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1581)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:633)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:499)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1579)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:266)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:173)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Thread.java:748)
[2022-02-24 17:23:34,518] ERROR [Broker id=1] Error while processing LeaderAndIsr request correlationId 3 received from controller 1 epoch 1 for partition __consumer_offsets-2 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader$.$anonfun$recoverLog$6(LogLoader.scala:468)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.scala:17)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogLoader$.recoverLog(LogLoader.scala:468)
	at kafka.log.LogLoader$.$anonfun$load$11(LogLoader.scala:168)
	at kafka.log.LogLoader$.load(LogLoader.scala:280)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1785)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:892)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:844)
	at kafka.cluster.Partition.createLog(Partition.scala:359)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:334)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:341)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:546)
	at kafka.cluster.Partition.makeLeader(Partition.scala:530)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1581)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:633)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:499)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1579)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:266)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:173)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Thread.java:748)
[2022-02-24 17:23:34,518] ERROR [Broker id=1] Error while processing LeaderAndIsr request correlationId 3 received from controller 1 epoch 1 for partition __consumer_offsets-25 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader$.$anonfun$recoverLog$6(LogLoader.scala:468)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.scala:17)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogLoader$.recoverLog(LogLoader.scala:468)
	at kafka.log.LogLoader$.$anonfun$load$11(LogLoader.scala:168)
	at kafka.log.LogLoader$.load(LogLoader.scala:280)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1785)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:892)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:844)
	at kafka.cluster.Partition.createLog(Partition.scala:359)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:334)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:341)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:546)
	at kafka.cluster.Partition.makeLeader(Partition.scala:530)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1581)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:633)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:499)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1579)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:266)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:173)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Thread.java:748)
[2022-02-24 17:23:34,518] ERROR [Broker id=1] Error while processing LeaderAndIsr request correlationId 3 received from controller 1 epoch 1 for partition __consumer_offsets-40 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader$.$anonfun$recoverLog$6(LogLoader.scala:468)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.scala:17)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogLoader$.recoverLog(LogLoader.scala:468)
	at kafka.log.LogLoader$.$anonfun$load$11(LogLoader.scala:168)
	at kafka.log.LogLoader$.load(LogLoader.scala:280)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1785)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:892)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:844)
	at kafka.cluster.Partition.createLog(Partition.scala:359)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:334)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:341)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:546)
	at kafka.cluster.Partition.makeLeader(Partition.scala:530)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1581)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:633)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:499)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1579)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:266)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:173)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Thread.java:748)
[2022-02-24 17:23:34,518] ERROR [Broker id=1] Error while processing LeaderAndIsr request correlationId 3 received from controller 1 epoch 1 for partition __consumer_offsets-47 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader$.$anonfun$recoverLog$6(LogLoader.scala:468)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.scala:17)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogLoader$.recoverLog(LogLoader.scala:468)
	at kafka.log.LogLoader$.$anonfun$load$11(LogLoader.scala:168)
	at kafka.log.LogLoader$.load(LogLoader.scala:280)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1785)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:892)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:844)
	at kafka.cluster.Partition.createLog(Partition.scala:359)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:334)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:341)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:546)
	at kafka.cluster.Partition.makeLeader(Partition.scala:530)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1581)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:633)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:499)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1579)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:266)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:173)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Thread.java:748)
[2022-02-24 17:23:34,518] ERROR [Broker id=1] Error while processing LeaderAndIsr request correlationId 3 received from controller 1 epoch 1 for partition __consumer_offsets-17 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader$.$anonfun$recoverLog$6(LogLoader.scala:468)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.scala:17)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogLoader$.recoverLog(LogLoader.scala:468)
	at kafka.log.LogLoader$.$anonfun$load$11(LogLoader.scala:168)
	at kafka.log.LogLoader$.load(LogLoader.scala:280)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1785)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:892)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:844)
	at kafka.cluster.Partition.createLog(Partition.scala:359)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:334)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:341)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:546)
	at kafka.cluster.Partition.makeLeader(Partition.scala:530)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1581)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:633)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:499)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1579)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:266)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:173)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Thread.java:748)
[2022-02-24 17:23:34,518] ERROR [Broker id=1] Error while processing LeaderAndIsr request correlationId 3 received from controller 1 epoch 1 for partition __consumer_offsets-32 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader$.$anonfun$recoverLog$6(LogLoader.scala:468)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.scala:17)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogLoader$.recoverLog(LogLoader.scala:468)
	at kafka.log.LogLoader$.$anonfun$load$11(LogLoader.scala:168)
	at kafka.log.LogLoader$.load(LogLoader.scala:280)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1785)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:892)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:844)
	at kafka.cluster.Partition.createLog(Partition.scala:359)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:334)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:341)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:546)
	at kafka.cluster.Partition.makeLeader(Partition.scala:530)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1581)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:633)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:499)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1579)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:266)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:173)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Thread.java:748)
[2022-02-24 17:23:34,518] ERROR [Broker id=1] Error while processing LeaderAndIsr request correlationId 3 received from controller 1 epoch 1 for partition __consumer_offsets-37 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader$.$anonfun$recoverLog$6(LogLoader.scala:468)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.scala:17)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogLoader$.recoverLog(LogLoader.scala:468)
	at kafka.log.LogLoader$.$anonfun$load$11(LogLoader.scala:168)
	at kafka.log.LogLoader$.load(LogLoader.scala:280)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1785)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:892)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:844)
	at kafka.cluster.Partition.createLog(Partition.scala:359)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:334)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:341)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:546)
	at kafka.cluster.Partition.makeLeader(Partition.scala:530)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1581)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:633)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:499)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1579)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:266)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:173)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Thread.java:748)
[2022-02-24 17:23:34,519] ERROR [Broker id=1] Error while processing LeaderAndIsr request correlationId 3 received from controller 1 epoch 1 for partition __consumer_offsets-7 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader$.$anonfun$recoverLog$6(LogLoader.scala:468)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.scala:17)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogLoader$.recoverLog(LogLoader.scala:468)
	at kafka.log.LogLoader$.$anonfun$load$11(LogLoader.scala:168)
	at kafka.log.LogLoader$.load(LogLoader.scala:280)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1785)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:892)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:844)
	at kafka.cluster.Partition.createLog(Partition.scala:359)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:334)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:341)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:546)
	at kafka.cluster.Partition.makeLeader(Partition.scala:530)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1581)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:633)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:499)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1579)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:266)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:173)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Thread.java:748)
[2022-02-24 17:23:34,519] ERROR [Broker id=1] Error while processing LeaderAndIsr request correlationId 3 received from controller 1 epoch 1 for partition __consumer_offsets-22 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader$.$anonfun$recoverLog$6(LogLoader.scala:468)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.scala:17)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogLoader$.recoverLog(LogLoader.scala:468)
	at kafka.log.LogLoader$.$anonfun$load$11(LogLoader.scala:168)
	at kafka.log.LogLoader$.load(LogLoader.scala:280)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1785)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:892)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:844)
	at kafka.cluster.Partition.createLog(Partition.scala:359)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:334)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:341)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:546)
	at kafka.cluster.Partition.makeLeader(Partition.scala:530)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1581)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:633)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:499)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1579)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:266)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:173)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Thread.java:748)
[2022-02-24 17:23:34,519] ERROR [Broker id=1] Error while processing LeaderAndIsr request correlationId 3 received from controller 1 epoch 1 for partition __consumer_offsets-29 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader$.$anonfun$recoverLog$6(LogLoader.scala:468)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.scala:17)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogLoader$.recoverLog(LogLoader.scala:468)
	at kafka.log.LogLoader$.$anonfun$load$11(LogLoader.scala:168)
	at kafka.log.LogLoader$.load(LogLoader.scala:280)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1785)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:892)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:844)
	at kafka.cluster.Partition.createLog(Partition.scala:359)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:334)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:341)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:546)
	at kafka.cluster.Partition.makeLeader(Partition.scala:530)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1581)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:633)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:499)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1579)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:266)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:173)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Thread.java:748)
[2022-02-24 17:23:34,519] ERROR [Broker id=1] Error while processing LeaderAndIsr request correlationId 3 received from controller 1 epoch 1 for partition __consumer_offsets-44 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader$.$anonfun$recoverLog$6(LogLoader.scala:468)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.scala:17)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogLoader$.recoverLog(LogLoader.scala:468)
	at kafka.log.LogLoader$.$anonfun$load$11(LogLoader.scala:168)
	at kafka.log.LogLoader$.load(LogLoader.scala:280)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1785)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:892)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:844)
	at kafka.cluster.Partition.createLog(Partition.scala:359)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:334)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:341)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:546)
	at kafka.cluster.Partition.makeLeader(Partition.scala:530)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1581)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:633)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:499)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1579)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:266)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:173)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Thread.java:748)
[2022-02-24 17:23:34,519] ERROR [Broker id=1] Error while processing LeaderAndIsr request correlationId 3 received from controller 1 epoch 1 for partition __consumer_offsets-14 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader$.$anonfun$recoverLog$6(LogLoader.scala:468)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.scala:17)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogLoader$.recoverLog(LogLoader.scala:468)
	at kafka.log.LogLoader$.$anonfun$load$11(LogLoader.scala:168)
	at kafka.log.LogLoader$.load(LogLoader.scala:280)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1785)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:892)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:844)
	at kafka.cluster.Partition.createLog(Partition.scala:359)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:334)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:341)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:546)
	at kafka.cluster.Partition.makeLeader(Partition.scala:530)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1581)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:633)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:499)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1579)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:266)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:173)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Thread.java:748)
[2022-02-24 17:23:34,519] ERROR [Broker id=1] Error while processing LeaderAndIsr request correlationId 3 received from controller 1 epoch 1 for partition __consumer_offsets-23 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader$.$anonfun$recoverLog$6(LogLoader.scala:468)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.scala:17)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogLoader$.recoverLog(LogLoader.scala:468)
	at kafka.log.LogLoader$.$anonfun$load$11(LogLoader.scala:168)
	at kafka.log.LogLoader$.load(LogLoader.scala:280)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1785)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:892)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:844)
	at kafka.cluster.Partition.createLog(Partition.scala:359)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:334)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:341)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:546)
	at kafka.cluster.Partition.makeLeader(Partition.scala:530)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1581)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:633)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:499)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1579)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:266)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:173)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Thread.java:748)
[2022-02-24 17:23:34,519] ERROR [Broker id=1] Error while processing LeaderAndIsr request correlationId 3 received from controller 1 epoch 1 for partition __consumer_offsets-38 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader$.$anonfun$recoverLog$6(LogLoader.scala:468)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.scala:17)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogLoader$.recoverLog(LogLoader.scala:468)
	at kafka.log.LogLoader$.$anonfun$load$11(LogLoader.scala:168)
	at kafka.log.LogLoader$.load(LogLoader.scala:280)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1785)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:892)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:844)
	at kafka.cluster.Partition.createLog(Partition.scala:359)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:334)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:341)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:546)
	at kafka.cluster.Partition.makeLeader(Partition.scala:530)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1581)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:633)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:499)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1579)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:266)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:173)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Thread.java:748)
[2022-02-24 17:23:34,519] ERROR [Broker id=1] Error while processing LeaderAndIsr request correlationId 3 received from controller 1 epoch 1 for partition __consumer_offsets-8 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader$.$anonfun$recoverLog$6(LogLoader.scala:468)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.scala:17)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogLoader$.recoverLog(LogLoader.scala:468)
	at kafka.log.LogLoader$.$anonfun$load$11(LogLoader.scala:168)
	at kafka.log.LogLoader$.load(LogLoader.scala:280)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1785)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:892)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:844)
	at kafka.cluster.Partition.createLog(Partition.scala:359)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:334)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:341)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:546)
	at kafka.cluster.Partition.makeLeader(Partition.scala:530)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1581)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:633)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:499)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1579)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:266)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:173)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Thread.java:748)
[2022-02-24 17:23:34,519] ERROR [Broker id=1] Error while processing LeaderAndIsr request correlationId 3 received from controller 1 epoch 1 for partition __consumer_offsets-45 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader$.$anonfun$recoverLog$6(LogLoader.scala:468)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.scala:17)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogLoader$.recoverLog(LogLoader.scala:468)
	at kafka.log.LogLoader$.$anonfun$load$11(LogLoader.scala:168)
	at kafka.log.LogLoader$.load(LogLoader.scala:280)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1785)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:892)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:844)
	at kafka.cluster.Partition.createLog(Partition.scala:359)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:334)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:341)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:546)
	at kafka.cluster.Partition.makeLeader(Partition.scala:530)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1581)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:633)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:499)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1579)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:266)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:173)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Thread.java:748)
[2022-02-24 17:23:34,520] ERROR [Broker id=1] Error while processing LeaderAndIsr request correlationId 3 received from controller 1 epoch 1 for partition __consumer_offsets-15 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader$.$anonfun$recoverLog$6(LogLoader.scala:468)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.scala:17)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogLoader$.recoverLog(LogLoader.scala:468)
	at kafka.log.LogLoader$.$anonfun$load$11(LogLoader.scala:168)
	at kafka.log.LogLoader$.load(LogLoader.scala:280)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1785)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:892)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:844)
	at kafka.cluster.Partition.createLog(Partition.scala:359)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:334)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:341)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:546)
	at kafka.cluster.Partition.makeLeader(Partition.scala:530)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1581)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:633)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:499)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1579)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:266)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:173)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Thread.java:748)
[2022-02-24 17:23:34,520] ERROR [Broker id=1] Error while processing LeaderAndIsr request correlationId 3 received from controller 1 epoch 1 for partition __consumer_offsets-30 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader$.$anonfun$recoverLog$6(LogLoader.scala:468)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.scala:17)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogLoader$.recoverLog(LogLoader.scala:468)
	at kafka.log.LogLoader$.$anonfun$load$11(LogLoader.scala:168)
	at kafka.log.LogLoader$.load(LogLoader.scala:280)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1785)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:892)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:844)
	at kafka.cluster.Partition.createLog(Partition.scala:359)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:334)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:341)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:546)
	at kafka.cluster.Partition.makeLeader(Partition.scala:530)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1581)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:633)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:499)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1579)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:266)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:173)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Thread.java:748)
[2022-02-24 17:23:34,520] ERROR [Broker id=1] Error while processing LeaderAndIsr request correlationId 3 received from controller 1 epoch 1 for partition __consumer_offsets-0 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader$.$anonfun$recoverLog$6(LogLoader.scala:468)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.scala:17)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogLoader$.recoverLog(LogLoader.scala:468)
	at kafka.log.LogLoader$.$anonfun$load$11(LogLoader.scala:168)
	at kafka.log.LogLoader$.load(LogLoader.scala:280)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1785)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:892)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:844)
	at kafka.cluster.Partition.createLog(Partition.scala:359)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:334)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:341)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:546)
	at kafka.cluster.Partition.makeLeader(Partition.scala:530)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1581)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:633)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:499)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1579)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:266)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:173)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Thread.java:748)
[2022-02-24 17:23:34,520] ERROR [Broker id=1] Error while processing LeaderAndIsr request correlationId 3 received from controller 1 epoch 1 for partition __consumer_offsets-35 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader$.$anonfun$recoverLog$6(LogLoader.scala:468)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.scala:17)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogLoader$.recoverLog(LogLoader.scala:468)
	at kafka.log.LogLoader$.$anonfun$load$11(LogLoader.scala:168)
	at kafka.log.LogLoader$.load(LogLoader.scala:280)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1785)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:892)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:844)
	at kafka.cluster.Partition.createLog(Partition.scala:359)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:334)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:341)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:546)
	at kafka.cluster.Partition.makeLeader(Partition.scala:530)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1581)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:633)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:499)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1579)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:266)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:173)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Thread.java:748)
[2022-02-24 17:23:34,520] ERROR [Broker id=1] Error while processing LeaderAndIsr request correlationId 3 received from controller 1 epoch 1 for partition __consumer_offsets-5 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader$.$anonfun$recoverLog$6(LogLoader.scala:468)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.scala:17)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogLoader$.recoverLog(LogLoader.scala:468)
	at kafka.log.LogLoader$.$anonfun$load$11(LogLoader.scala:168)
	at kafka.log.LogLoader$.load(LogLoader.scala:280)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1785)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:892)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:844)
	at kafka.cluster.Partition.createLog(Partition.scala:359)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:334)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:341)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:546)
	at kafka.cluster.Partition.makeLeader(Partition.scala:530)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1581)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:633)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:499)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1579)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:266)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:173)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Thread.java:748)
[2022-02-24 17:23:34,520] ERROR [Broker id=1] Error while processing LeaderAndIsr request correlationId 3 received from controller 1 epoch 1 for partition __consumer_offsets-20 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader$.$anonfun$recoverLog$6(LogLoader.scala:468)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.scala:17)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogLoader$.recoverLog(LogLoader.scala:468)
	at kafka.log.LogLoader$.$anonfun$load$11(LogLoader.scala:168)
	at kafka.log.LogLoader$.load(LogLoader.scala:280)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1785)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:892)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:844)
	at kafka.cluster.Partition.createLog(Partition.scala:359)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:334)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:341)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:546)
	at kafka.cluster.Partition.makeLeader(Partition.scala:530)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1581)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:633)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:499)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1579)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:266)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:173)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Thread.java:748)
[2022-02-24 17:23:34,520] ERROR [Broker id=1] Error while processing LeaderAndIsr request correlationId 3 received from controller 1 epoch 1 for partition __consumer_offsets-27 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader$.$anonfun$recoverLog$6(LogLoader.scala:468)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.scala:17)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogLoader$.recoverLog(LogLoader.scala:468)
	at kafka.log.LogLoader$.$anonfun$load$11(LogLoader.scala:168)
	at kafka.log.LogLoader$.load(LogLoader.scala:280)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1785)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:892)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:844)
	at kafka.cluster.Partition.createLog(Partition.scala:359)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:334)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:341)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:546)
	at kafka.cluster.Partition.makeLeader(Partition.scala:530)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1581)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:633)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:499)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1579)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:266)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:173)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Thread.java:748)
[2022-02-24 17:23:34,520] ERROR [Broker id=1] Error while processing LeaderAndIsr request correlationId 3 received from controller 1 epoch 1 for partition __consumer_offsets-42 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader$.$anonfun$recoverLog$6(LogLoader.scala:468)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.scala:17)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogLoader$.recoverLog(LogLoader.scala:468)
	at kafka.log.LogLoader$.$anonfun$load$11(LogLoader.scala:168)
	at kafka.log.LogLoader$.load(LogLoader.scala:280)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1785)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:892)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:844)
	at kafka.cluster.Partition.createLog(Partition.scala:359)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:334)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:341)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:546)
	at kafka.cluster.Partition.makeLeader(Partition.scala:530)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1581)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:633)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:499)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1579)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:266)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:173)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Thread.java:748)
[2022-02-24 17:23:34,520] ERROR [Broker id=1] Error while processing LeaderAndIsr request correlationId 3 received from controller 1 epoch 1 for partition __consumer_offsets-12 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader$.$anonfun$recoverLog$6(LogLoader.scala:468)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.scala:17)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogLoader$.recoverLog(LogLoader.scala:468)
	at kafka.log.LogLoader$.$anonfun$load$11(LogLoader.scala:168)
	at kafka.log.LogLoader$.load(LogLoader.scala:280)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1785)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:892)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:844)
	at kafka.cluster.Partition.createLog(Partition.scala:359)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:334)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:341)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:546)
	at kafka.cluster.Partition.makeLeader(Partition.scala:530)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1581)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:633)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:499)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1579)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:266)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:173)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Thread.java:748)
[2022-02-24 17:23:34,520] ERROR [Broker id=1] Error while processing LeaderAndIsr request correlationId 3 received from controller 1 epoch 1 for partition __consumer_offsets-21 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader$.$anonfun$recoverLog$6(LogLoader.scala:468)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.scala:17)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogLoader$.recoverLog(LogLoader.scala:468)
	at kafka.log.LogLoader$.$anonfun$load$11(LogLoader.scala:168)
	at kafka.log.LogLoader$.load(LogLoader.scala:280)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1785)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:892)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:844)
	at kafka.cluster.Partition.createLog(Partition.scala:359)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:334)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:341)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:546)
	at kafka.cluster.Partition.makeLeader(Partition.scala:530)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1581)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:633)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:499)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1579)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:266)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:173)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Thread.java:748)
[2022-02-24 17:23:34,521] ERROR [Broker id=1] Error while processing LeaderAndIsr request correlationId 3 received from controller 1 epoch 1 for partition __consumer_offsets-36 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader$.$anonfun$recoverLog$6(LogLoader.scala:468)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.scala:17)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogLoader$.recoverLog(LogLoader.scala:468)
	at kafka.log.LogLoader$.$anonfun$load$11(LogLoader.scala:168)
	at kafka.log.LogLoader$.load(LogLoader.scala:280)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1785)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:892)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:844)
	at kafka.cluster.Partition.createLog(Partition.scala:359)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:334)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:341)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:546)
	at kafka.cluster.Partition.makeLeader(Partition.scala:530)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1581)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:633)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:499)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1579)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:266)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:173)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Thread.java:748)
[2022-02-24 17:23:34,521] ERROR [Broker id=1] Error while processing LeaderAndIsr request correlationId 3 received from controller 1 epoch 1 for partition __consumer_offsets-6 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader$.$anonfun$recoverLog$6(LogLoader.scala:468)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.scala:17)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogLoader$.recoverLog(LogLoader.scala:468)
	at kafka.log.LogLoader$.$anonfun$load$11(LogLoader.scala:168)
	at kafka.log.LogLoader$.load(LogLoader.scala:280)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1785)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:892)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:844)
	at kafka.cluster.Partition.createLog(Partition.scala:359)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:334)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:341)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:546)
	at kafka.cluster.Partition.makeLeader(Partition.scala:530)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1581)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:633)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:499)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1579)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:266)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:173)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Thread.java:748)
[2022-02-24 17:23:34,521] ERROR [Broker id=1] Error while processing LeaderAndIsr request correlationId 3 received from controller 1 epoch 1 for partition __consumer_offsets-43 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader$.$anonfun$recoverLog$6(LogLoader.scala:468)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.scala:17)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogLoader$.recoverLog(LogLoader.scala:468)
	at kafka.log.LogLoader$.$anonfun$load$11(LogLoader.scala:168)
	at kafka.log.LogLoader$.load(LogLoader.scala:280)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1785)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:892)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:844)
	at kafka.cluster.Partition.createLog(Partition.scala:359)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:334)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:341)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:546)
	at kafka.cluster.Partition.makeLeader(Partition.scala:530)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1581)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:633)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:499)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1579)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:266)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:173)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Thread.java:748)
[2022-02-24 17:23:34,521] ERROR [Broker id=1] Error while processing LeaderAndIsr request correlationId 3 received from controller 1 epoch 1 for partition __consumer_offsets-13 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader$.$anonfun$recoverLog$6(LogLoader.scala:468)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.scala:17)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogLoader$.recoverLog(LogLoader.scala:468)
	at kafka.log.LogLoader$.$anonfun$load$11(LogLoader.scala:168)
	at kafka.log.LogLoader$.load(LogLoader.scala:280)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1785)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:892)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:844)
	at kafka.cluster.Partition.createLog(Partition.scala:359)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:334)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:341)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:546)
	at kafka.cluster.Partition.makeLeader(Partition.scala:530)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1581)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:633)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:499)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1579)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:266)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:173)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Thread.java:748)
[2022-02-24 17:23:34,521] ERROR [Broker id=1] Error while processing LeaderAndIsr request correlationId 3 received from controller 1 epoch 1 for partition __consumer_offsets-28 (state.change.logger)
java.io.IOException: There is not enough space on the disk
	at java.io.RandomAccessFile.setLength(Native Method)
	at kafka.log.AbstractIndex.<init>(AbstractIndex.scala:117)
	at kafka.log.OffsetIndex.<init>(OffsetIndex.scala:54)
	at kafka.log.LazyIndex$.$anonfun$forOffset$1(LazyIndex.scala:106)
	at kafka.log.LazyIndex.$anonfun$get$1(LazyIndex.scala:63)
	at kafka.log.LazyIndex.get(LazyIndex.scala:60)
	at kafka.log.LogSegment.offsetIndex(LogSegment.scala:64)
	at kafka.log.LogSegment.readNextOffset(LogSegment.scala:453)
	at kafka.log.LogLoader$.$anonfun$recoverLog$6(LogLoader.scala:468)
	at scala.runtime.java8.JFunction0$mcJ$sp.apply(JFunction0$mcJ$sp.scala:17)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogLoader$.recoverLog(LogLoader.scala:468)
	at kafka.log.LogLoader$.$anonfun$load$11(LogLoader.scala:168)
	at kafka.log.LogLoader$.load(LogLoader.scala:280)
	at kafka.log.UnifiedLog$.apply(UnifiedLog.scala:1785)
	at kafka.log.LogManager.$anonfun$getOrCreateLog$1(LogManager.scala:892)
	at scala.Option.getOrElse(Option.scala:201)
	at kafka.log.LogManager.getOrCreateLog(LogManager.scala:844)
	at kafka.cluster.Partition.createLog(Partition.scala:359)
	at kafka.cluster.Partition.maybeCreate$1(Partition.scala:334)
	at kafka.cluster.Partition.createLogIfNotExists(Partition.scala:341)
	at kafka.cluster.Partition.$anonfun$makeLeader$1(Partition.scala:546)
	at kafka.cluster.Partition.makeLeader(Partition.scala:530)
	at kafka.server.ReplicaManager.$anonfun$makeLeaders$5(ReplicaManager.scala:1581)
	at kafka.utils.Implicits$MapExtensionMethods$.$anonfun$forKeyValue$1(Implicits.scala:62)
	at scala.collection.mutable.HashMap$Node.foreachEntry(HashMap.scala:633)
	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:499)
	at kafka.server.ReplicaManager.becomeLeaderOrFollower(ReplicaManager.scala:1579)
	at kafka.server.KafkaApis.handleLeaderAndIsrRequest(KafkaApis.scala:266)
	at kafka.server.KafkaApis.handle(KafkaApis.scala:173)
	at kafka.server.KafkaRequestHandler.run(KafkaRequestHandler.scala:75)
	at java.lang.Thread.run(Thread.java:748)
[2022-02-24 17:23:34,532] ERROR [Controller id=1] Received error UNKNOWN_SERVER_ERROR in LeaderAndIsr response LeaderAndIsrResponseData(errorCode=-1, partitionErrors=[], topics=[LeaderAndIsrTopicError(topicId=pmJF5ZDDQPqQf28QkxdPnQ, partitionErrors=[LeaderAndIsrPartitionError(topicName='', partitionIndex=13, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=46, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=9, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=42, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=21, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=17, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=30, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=26, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=5, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=38, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=1, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=34, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=16, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=45, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=12, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=41, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=24, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=20, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=49, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=0, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=29, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=25, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=8, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=37, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=4, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=33, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=15, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=48, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=11, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=44, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=23, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=19, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=32, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=28, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=7, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=40, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=3, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=36, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=47, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=14, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=43, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=10, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=22, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=18, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=31, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=27, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=39, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=6, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=35, errorCode=-1), LeaderAndIsrPartitionError(topicName='', partitionIndex=2, errorCode=-1)])]) from broker 1 (state.change.logger)
[2022-02-24 17:23:34,533] INFO [Broker id=1] Add 50 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 1 epoch 1 with correlation id 4 (state.change.logger)
[2022-02-24 17:26:05,275] INFO [Controller id=1 epoch=1] Sending UpdateMetadata request to brokers HashSet() for 0 partitions (state.change.logger)
[2022-02-24 17:51:28,946] INFO [Controller id=1 epoch=1] Sending UpdateMetadata request to brokers HashSet(1) for 0 partitions (state.change.logger)
[2022-02-24 17:51:55,048] INFO [Controller id=1 epoch=1] Changed partition topic01-0 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:51:55,049] INFO [Controller id=1 epoch=1] Sending UpdateMetadata request to brokers HashSet() for 0 partitions (state.change.logger)
[2022-02-24 17:51:55,058] INFO [Controller id=1 epoch=1] Sending UpdateMetadata request to brokers HashSet() for 0 partitions (state.change.logger)
[2022-02-24 17:51:55,093] INFO [Controller id=1 epoch=1] Changed partition topic01-0 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:51:55,095] INFO [Controller id=1 epoch=1] Sending LeaderAndIsr request to broker 1 with 1 become-leader and 0 become-follower partitions (state.change.logger)
[2022-02-24 17:51:55,097] INFO [Controller id=1 epoch=1] Sending UpdateMetadata request to brokers HashSet(1) for 1 partitions (state.change.logger)
[2022-02-24 17:51:55,098] INFO [Controller id=1 epoch=1] Sending UpdateMetadata request to brokers HashSet() for 0 partitions (state.change.logger)
[2022-02-24 17:51:55,101] INFO [Broker id=1] Handling LeaderAndIsr request correlationId 1 from controller 1 for 1 partitions (state.change.logger)
[2022-02-24 17:51:55,127] INFO [Broker id=1] Stopped fetchers as part of LeaderAndIsr request correlationId 1 from controller 1 epoch 1 as part of the become-leader transition for 1 partitions (state.change.logger)
[2022-02-24 17:51:55,310] INFO [Broker id=1] Leader topic01-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:51:55,340] INFO [Broker id=1] Finished LeaderAndIsr request in 240ms correlationId 1 from controller 1 for 1 partitions (state.change.logger)
[2022-02-24 17:51:55,356] INFO [Broker id=1] Add 1 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 1 epoch 1 with correlation id 2 (state.change.logger)
[2022-02-24 17:54:41,404] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-22 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:54:41,404] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-30 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:54:41,404] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-25 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:54:41,404] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-35 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:54:41,404] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-37 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:54:41,404] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-38 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:54:41,404] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-13 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:54:41,404] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-8 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:54:41,404] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-21 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:54:41,404] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-4 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:54:41,404] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-27 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:54:41,404] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-7 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:54:41,404] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-9 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:54:41,404] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-46 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:54:41,404] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-41 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:54:41,404] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-33 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:54:41,404] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-23 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:54:41,404] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-49 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:54:41,404] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-47 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:54:41,404] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-16 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:54:41,404] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-28 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:54:41,404] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-31 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:54:41,404] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-36 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:54:41,404] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-42 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:54:41,404] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-3 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:54:41,404] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-18 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:54:41,404] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-15 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:54:41,405] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-24 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:54:41,405] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-17 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:54:41,405] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-48 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:54:41,405] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-19 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:54:41,405] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-11 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:54:41,405] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-2 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:54:41,405] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-43 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:54:41,405] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-6 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:54:41,405] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-14 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:54:41,405] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-20 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:54:41,405] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-0 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:54:41,405] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-44 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:54:41,405] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-39 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:54:41,405] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-12 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:54:41,405] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-45 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:54:41,405] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-1 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:54:41,405] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-5 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:54:41,405] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-26 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:54:41,405] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-29 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:54:41,405] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-34 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:54:41,405] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-10 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:54:41,405] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-32 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:54:41,405] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-40 state from NonExistentPartition to NewPartition with assigned replicas 1 (state.change.logger)
[2022-02-24 17:54:41,405] INFO [Controller id=1 epoch=1] Sending UpdateMetadata request to brokers HashSet() for 0 partitions (state.change.logger)
[2022-02-24 17:54:41,407] INFO [Controller id=1 epoch=1] Sending UpdateMetadata request to brokers HashSet() for 0 partitions (state.change.logger)
[2022-02-24 17:54:41,517] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-22 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:54:41,518] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-30 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:54:41,518] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-25 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:54:41,518] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-35 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:54:41,518] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-37 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:54:41,518] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-38 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:54:41,518] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-13 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:54:41,518] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-8 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:54:41,518] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-21 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:54:41,518] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-4 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:54:41,518] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-27 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:54:41,518] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-7 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:54:41,518] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-9 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:54:41,518] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-46 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:54:41,518] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-41 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:54:41,518] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-33 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:54:41,518] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-23 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:54:41,518] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-49 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:54:41,518] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-47 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:54:41,518] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-16 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:54:41,518] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-28 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:54:41,518] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-31 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:54:41,518] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-36 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:54:41,518] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-42 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:54:41,518] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-3 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:54:41,518] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-18 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:54:41,518] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-15 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:54:41,519] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-24 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:54:41,519] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-17 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:54:41,519] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-48 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:54:41,519] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-19 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:54:41,519] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-11 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:54:41,519] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-2 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:54:41,519] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-43 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:54:41,519] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-6 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:54:41,519] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-14 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:54:41,519] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-20 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:54:41,519] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-0 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:54:41,519] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-44 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:54:41,519] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-39 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:54:41,519] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-12 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:54:41,519] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-45 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:54:41,519] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-1 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:54:41,519] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-5 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:54:41,519] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-26 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:54:41,519] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-29 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:54:41,519] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-34 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:54:41,519] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-10 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:54:41,519] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-32 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:54:41,519] INFO [Controller id=1 epoch=1] Changed partition __consumer_offsets-40 from NewPartition to OnlinePartition with state LeaderAndIsr(leader=1, leaderEpoch=0, isr=List(1), zkVersion=0) (state.change.logger)
[2022-02-24 17:54:41,520] INFO [Controller id=1 epoch=1] Sending LeaderAndIsr request to broker 1 with 50 become-leader and 0 become-follower partitions (state.change.logger)
[2022-02-24 17:54:41,520] INFO [Controller id=1 epoch=1] Sending UpdateMetadata request to brokers HashSet(1) for 50 partitions (state.change.logger)
[2022-02-24 17:54:41,521] INFO [Controller id=1 epoch=1] Sending UpdateMetadata request to brokers HashSet() for 0 partitions (state.change.logger)
[2022-02-24 17:54:41,522] INFO [Broker id=1] Handling LeaderAndIsr request correlationId 3 from controller 1 for 50 partitions (state.change.logger)
[2022-02-24 17:54:41,559] INFO [Broker id=1] Stopped fetchers as part of LeaderAndIsr request correlationId 3 from controller 1 epoch 1 as part of the become-leader transition for 50 partitions (state.change.logger)
[2022-02-24 17:54:41,587] INFO [Broker id=1] Leader __consumer_offsets-3 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:54:41,603] INFO [Broker id=1] Leader __consumer_offsets-18 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:54:41,623] INFO [Broker id=1] Leader __consumer_offsets-41 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:54:41,644] INFO [Broker id=1] Leader __consumer_offsets-10 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:54:41,663] INFO [Broker id=1] Leader __consumer_offsets-33 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:54:41,682] INFO [Broker id=1] Leader __consumer_offsets-48 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:54:41,708] INFO [Broker id=1] Leader __consumer_offsets-19 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:54:41,737] INFO [Broker id=1] Leader __consumer_offsets-34 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:54:41,766] INFO [Broker id=1] Leader __consumer_offsets-4 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:54:41,799] INFO [Broker id=1] Leader __consumer_offsets-11 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:54:41,827] INFO [Broker id=1] Leader __consumer_offsets-26 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:54:41,847] INFO [Broker id=1] Leader __consumer_offsets-49 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:54:41,874] INFO [Broker id=1] Leader __consumer_offsets-39 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:54:41,896] INFO [Broker id=1] Leader __consumer_offsets-9 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:54:41,916] INFO [Broker id=1] Leader __consumer_offsets-24 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:54:41,938] INFO [Broker id=1] Leader __consumer_offsets-31 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:54:41,959] INFO [Broker id=1] Leader __consumer_offsets-46 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:54:41,979] INFO [Broker id=1] Leader __consumer_offsets-1 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:54:42,000] INFO [Broker id=1] Leader __consumer_offsets-16 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:54:42,021] INFO [Broker id=1] Leader __consumer_offsets-2 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:54:42,045] INFO [Broker id=1] Leader __consumer_offsets-25 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:54:42,065] INFO [Broker id=1] Leader __consumer_offsets-40 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:54:42,089] INFO [Broker id=1] Leader __consumer_offsets-47 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:54:42,107] INFO [Broker id=1] Leader __consumer_offsets-17 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:54:42,130] INFO [Broker id=1] Leader __consumer_offsets-32 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:54:42,157] INFO [Broker id=1] Leader __consumer_offsets-37 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:54:42,176] INFO [Broker id=1] Leader __consumer_offsets-7 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:54:42,201] INFO [Broker id=1] Leader __consumer_offsets-22 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:54:42,221] INFO [Broker id=1] Leader __consumer_offsets-29 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:54:42,241] INFO [Broker id=1] Leader __consumer_offsets-44 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:54:42,267] INFO [Broker id=1] Leader __consumer_offsets-14 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:54:42,287] INFO [Broker id=1] Leader __consumer_offsets-23 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:54:42,310] INFO [Broker id=1] Leader __consumer_offsets-38 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:54:42,330] INFO [Broker id=1] Leader __consumer_offsets-8 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:54:42,351] INFO [Broker id=1] Leader __consumer_offsets-45 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:54:42,376] INFO [Broker id=1] Leader __consumer_offsets-15 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:54:42,397] INFO [Broker id=1] Leader __consumer_offsets-30 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:54:42,416] INFO [Broker id=1] Leader __consumer_offsets-0 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:54:42,437] INFO [Broker id=1] Leader __consumer_offsets-35 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:54:42,459] INFO [Broker id=1] Leader __consumer_offsets-5 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:54:42,481] INFO [Broker id=1] Leader __consumer_offsets-20 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:54:42,500] INFO [Broker id=1] Leader __consumer_offsets-27 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:54:42,525] INFO [Broker id=1] Leader __consumer_offsets-42 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:54:42,543] INFO [Broker id=1] Leader __consumer_offsets-12 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:54:42,560] INFO [Broker id=1] Leader __consumer_offsets-21 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:54:42,588] INFO [Broker id=1] Leader __consumer_offsets-36 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:54:42,614] INFO [Broker id=1] Leader __consumer_offsets-6 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:54:42,631] INFO [Broker id=1] Leader __consumer_offsets-43 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:54:42,652] INFO [Broker id=1] Leader __consumer_offsets-13 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:54:42,676] INFO [Broker id=1] Leader __consumer_offsets-28 starts at leader epoch 0 from offset 0 with high watermark 0 ISR [1] addingReplicas [] removingReplicas []. Previous leader epoch was -1. (state.change.logger)
[2022-02-24 17:54:42,802] INFO [Broker id=1] Finished LeaderAndIsr request in 1280ms correlationId 3 from controller 1 for 50 partitions (state.change.logger)
[2022-02-24 17:54:42,806] INFO [Broker id=1] Add 50 partitions and deleted 0 partitions from metadata cache in response to UpdateMetadata request sent by controller 1 epoch 1 with correlation id 4 (state.change.logger)
