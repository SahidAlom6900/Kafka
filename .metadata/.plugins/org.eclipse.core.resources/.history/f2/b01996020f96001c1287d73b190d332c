package com.technpelevate.kafka.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.support.SendResult;
import org.springframework.util.concurrent.ListenableFuture;
import org.springframework.util.concurrent.ListenableFutureCallback;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.technpelevate.kafka.dto.UserDto;

import lombok.extern.slf4j.Slf4j;

@RestController
@RequestMapping("api/v1/kafka")
@Slf4j
public class KafkaController {

	@Autowired
	private KafkaTemplate<String, String> kafkaTemplate;
	@Autowired
	private KafkaTemplate<String, UserDto> kafkaTemplate1;

	@GetMapping("{name}")
	public String name(@PathVariable("name") String name) {
		for (int i = 0; i < 2000000; i++) {
			kafkaTemplate.send("topic02", name.toLowerCase() + i);
		}

		for (int i = 0; i < 2000000; i++) {
			kafkaTemplate.send("topic01", name.toUpperCase() + i);
		}

		
		UserDto userDto=new UserDto(12345, "Sahid Alom", 9856475812l, "assam");
        ListenableFuture<SendResult<String, UserDto>> future = kafkaTemplate1.send("topic01",userDto );
        future.addCallback(null, new ListenableFutureCallback<SendResult<String, UserDto>>() {
        	@Override
            public void onSuccess(SendResult<String, UserDto> result) {
                log.info("Sent message with offset=[" + result.getRecordMetadata().offset() + "]");
            }
            @Override
            public void onFailure(Throwable ex) {
                log.error("Unable to send message due to : " + ex.getMessage());
            }
        });
        return "OK";
	}
}
