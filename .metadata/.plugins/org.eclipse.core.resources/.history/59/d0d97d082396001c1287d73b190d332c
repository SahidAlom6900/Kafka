package com.technpelevate.kafka.controller;

import java.util.ArrayList;
import java.util.List;

import javax.el.ArrayELResolver;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.support.SendResult;
import org.springframework.util.concurrent.ListenableFuture;
import org.springframework.util.concurrent.ListenableFutureCallback;
import org.springframework.util.concurrent.SuccessCallback;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.technpelevate.kafka.dto.UserDto;

import lombok.extern.slf4j.Slf4j;

@RestController
@RequestMapping("api/v1/kafka")
@Slf4j
public class KafkaController {

	@Autowired
	private KafkaTemplate<String, Object> kafkaTemplate;

	@GetMapping("{name}")
	public void name(@PathVariable("name") String name) {
		UserDto userDto = new UserDto(12345, "Sahid Alom", 9856475812l, "assam");
		List<UserDto> userDtos=new ArrayList<>();
		for (int i = 0; i < 1000; i++) {
			userDtos.add(userDto);
		}
		ListenableFuture<SendResult<String, Object>> future = kafkaTemplate.send("topic01", userDtos);
		future.addCallback(new SuccessCallback<Object>() {
			@Override
			public void onSuccess(Object result) {
				log.info("Sent message with offset=[" + result + "]");
			}
		}, new ListenableFutureCallback<SendResult<String, Object>>() {
			@Override
			public void onSuccess(SendResult<String, Object> result) {
				log.info("Sent message with offset=[" + result.getRecordMetadata().offset() + "]");
			}

			@Override
			public void onFailure(Throwable ex) {
				log.error("Unable to send message due to : " + ex.getMessage());
			}
		});
	}
}
